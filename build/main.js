/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/js/AnimatedText.js":
/*!***********************************!*\
  !*** ./src/ts/js/AnimatedText.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst temp_1 = __importDefault(__webpack_require__(/*! ./temp */ \"./src/ts/js/temp.js\"));\nclass AnimatedText {\n    constructor(element, modal = null, speed = 10) {\n        this.removePreviousTimeout = () => {\n            if (this.lastTimeoutId !== null) {\n                clearTimeout(this.lastTimeoutId);\n                this.lastTimeoutId = null;\n            }\n        };\n        this.displayTarget = element;\n        this.typeSpeed = speed;\n        this.modal = modal;\n        this.lastTimeoutId = null;\n    }\n    setSpeed(newSpeed) {\n        this.typeSpeed = newSpeed;\n    }\n    typeTemporary(text, removeAfter = 2500) {\n        var _a, _b;\n        this.resetText();\n        this.removePreviousTimeout();\n        (_a = this.displayTarget) === null || _a === void 0 ? void 0 : _a.classList.remove(\"hide\");\n        if (this.modal) {\n            (_b = this.modal) === null || _b === void 0 ? void 0 : _b.classList.remove(\"hide\");\n        }\n        temp_1.default(this.displayTarget, text);\n        setTimeout(() => {\n            var _a, _b;\n            (_a = this.displayTarget) === null || _a === void 0 ? void 0 : _a.classList.add(\"hide\");\n            if (this.modal) {\n                (_b = this.modal) === null || _b === void 0 ? void 0 : _b.classList.add(\"hide\");\n            }\n        }, removeAfter);\n    }\n    type(text) {\n        var _a, _b;\n        this.resetText();\n        this.removePreviousTimeout();\n        (_a = this.displayTarget) === null || _a === void 0 ? void 0 : _a.classList.remove(\"hide\");\n        if (this.modal) {\n            (_b = this.modal) === null || _b === void 0 ? void 0 : _b.classList.remove(\"hide\");\n        }\n        temp_1.default(this.displayTarget, text);\n    }\n    hide() {\n        var _a;\n        this.displayTarget.classList.add(\"hide\");\n        if (this.modal) {\n            (_a = this.modal) === null || _a === void 0 ? void 0 : _a.classList.add(\"hide\");\n        }\n    }\n    resetText() {\n        var _a, _b;\n        const elementToReplace = this.displayTarget;\n        const newElement = document.createElement(elementToReplace.tagName.toLowerCase());\n        newElement.id = elementToReplace.id;\n        const classArray = elementToReplace.classList.value.split(\" \");\n        classArray.forEach((item) => {\n            newElement.classList.add(item);\n        });\n        if (elementToReplace.nextElementSibling === null) {\n            (_a = elementToReplace.parentElement) === null || _a === void 0 ? void 0 : _a.append(newElement);\n        }\n        else {\n            (_b = elementToReplace.parentElement) === null || _b === void 0 ? void 0 : _b.insertBefore(newElement, elementToReplace.nextElementSibling);\n        }\n        elementToReplace.remove();\n        this.displayTarget = newElement;\n    }\n}\nexports.default = AnimatedText;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/AnimatedText.js?");

/***/ }),

/***/ "./src/ts/js/BoardSetup.js":
/*!*********************************!*\
  !*** ./src/ts/js/BoardSetup.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass BoardSetup {\n    constructor(player, gameboard) {\n        this.player = player;\n        this.gameboard = gameboard;\n        this.setupPhase = !player.isComputer;\n        if (this.setupPhase) {\n            this.shipsDOM = this.setShips();\n            this.addDClick();\n            this.shipDOMPickUp();\n            this.dokcyardSetup();\n        }\n        else {\n            this.shipsDOM = null;\n        }\n    }\n    setShips() {\n        return Array.from(document.getElementsByClassName(\"ship\"));\n    }\n    addSquares() {\n        const dropShip = this.ShipDOMDrop();\n        const beginDrag = this.getBeginDrag();\n        const suffix = this.player.isComputer ? \"com_\" : \"hum_\";\n        for (let i = 0; i < 100; i++) {\n            const newDiv = document.createElement(\"div\");\n            newDiv.className = \"game-square\";\n            newDiv.id = suffix + i;\n            newDiv.setAttribute(\"index\", i.toString());\n            newDiv.addEventListener(\"dragover\", beginDrag);\n            newDiv.addEventListener(\"drop\", dropShip);\n            this.gameboard.appendChild(newDiv);\n        }\n    }\n    getShipDOMStartAndEnd(square, ship) {\n        const length = Number(ship.getAttribute(\"length\"));\n        const squareIndex = Number(square.getAttribute(\"index\"));\n        if (ship.classList.contains(\"ship-vertical\")) {\n            return [squareIndex, squareIndex + 10 * (length - 1)];\n        }\n        else {\n            return [squareIndex, squareIndex + length - 1];\n        }\n    }\n    getBeginDrag() {\n        const beginDrag = (e) => {\n            e.preventDefault();\n        };\n        return beginDrag;\n    }\n    updateBoard() {\n        const gameSquares = Array.from(this.gameboard.children);\n        for (let i = 0; i < 100; i++) {\n            gameSquares[i].className = `game-square ${this.player.gameboard.boardState.getSquareState(i)}`;\n        }\n    }\n    shipDOMPickUp() {\n        if (this.shipsDOM !== null) {\n            const dragStart = (e) => {\n                e.dataTransfer.setData(\"text/plain\", \"S\" + e.target.id);\n                // console.log(e.target.parentElement, \"picked up\");\n                if (e.target.getAttribute(\"start\") !== null) {\n                    // console.log(\"removing a ship\");\n                    const start = e.target.getAttribute(\"start\");\n                    const end = e.target.getAttribute(\"end\");\n                    this.player.gameboard.removeShip(start, end);\n                }\n            };\n            this.shipsDOM.forEach((item) => {\n                item.addEventListener(\"dragstart\", dragStart);\n            });\n        }\n    }\n    ShipDOMDrop() {\n        const dropShip = (e) => {\n            e.preventDefault();\n            // console.log(e);\n            let id = e.dataTransfer.getData(\"text/plain\");\n            if (this.checkIfVaildDrop(id)) {\n                const restOfData = this.getDropData(id);\n                const shipDom = document.getElementById(restOfData);\n                const previousParent = shipDom.parentElement;\n                const dropTarget = this.getDropSquare(shipDom, e.target);\n                // console.log(dropTarget, shipDom,previousParent);\n                if (dropTarget.classList.contains(\"game-square\")) {\n                    const cords = this.getShipDOMStartAndEnd(dropTarget, shipDom);\n                    if (this.player.tryToPlaceShip(cords[0], cords[1])) {\n                        // console.log(\"placed in new loaction\");\n                        shipDom.setAttribute(\"start\", cords[0].toString());\n                        shipDom.setAttribute(\"end\", cords[1].toString());\n                        dropTarget.append(shipDom);\n                    }\n                    else {\n                        // console.log(\"fail\");\n                        const start = Number(shipDom.getAttribute(\"start\"));\n                        const end = Number(shipDom.getAttribute(\"end\"));\n                        const length = Number(shipDom.getAttribute(\"length\"));\n                        if (start === end && end === 0 && length !== 1) {\n                        }\n                        else {\n                            this.player.tryToPlaceShip(start, end);\n                            previousParent === null || previousParent === void 0 ? void 0 : previousParent.append(shipDom);\n                            console.log(this);\n                        }\n                    }\n                }\n                this.updateBoard();\n                // console.log(this.player);\n            }\n        };\n        return dropShip;\n    }\n    getDropSquare(shipDom, dropTarget) {\n        // console.log(shipDom, dropTarget);\n        if (dropTarget.classList.contains(\"ship-part\")) {\n            const boundingRect = dropTarget.getBoundingClientRect();\n            const elementsOnPosition = document.elementsFromPoint(boundingRect.x, boundingRect.y);\n            // console.log(elementsOnPosition, \"whats on positon\");\n            for (const item of elementsOnPosition) {\n                if (item.classList.contains(\"game-square\")) {\n                    // console.log(item);\n                    return item;\n                }\n            }\n            // return elementsOnPosition[1]\n        }\n        return dropTarget;\n    }\n    addDClick() {\n        const doubleClick = (e) => {\n            const shipDom = e.target.parentElement;\n            if (shipDom.parentElement.id === \"dockyard\") {\n                shipDom.classList.toggle(\"ship-vertical\");\n                console.log(\"DOCK\");\n            }\n            else {\n                const start = Number(shipDom.getAttribute(\"start\"));\n                const currentEnd = Number(shipDom.getAttribute(\"end\"));\n                const length = Number(shipDom.getAttribute(\"length\"));\n                let newEnd = 0;\n                if (currentEnd - start < 10) {\n                    newEnd = start + (length - 1) * 10;\n                }\n                else {\n                    newEnd = start + length - 1;\n                }\n                console.log(start, currentEnd, newEnd);\n                this.player.gameboard.removeShip(start, currentEnd);\n                if (this.player.tryToPlaceShip(start, newEnd)) {\n                    shipDom.classList.toggle(\"ship-vertical\");\n                    console.log(\"succcc\");\n                    shipDom.setAttribute(\"start\", start.toString());\n                    shipDom.setAttribute(\"end\", newEnd.toString());\n                }\n                else {\n                    this.player.tryToPlaceShip(start, currentEnd);\n                    console.log(\"FAIL\");\n                }\n                console.log(this.player);\n                this.updateBoard();\n            }\n        };\n        if (this.shipsDOM !== null) {\n            this.shipsDOM.forEach((item) => item.addEventListener(\"dblclick\", doubleClick));\n        }\n    }\n    dokcyardSetup() {\n        const dockyard = document.getElementById(\"dockyard\");\n        const dropShipToDockyard = (e) => {\n            e.preventDefault();\n            // console.log(\"dropping to dock\");\n            const id = e.dataTransfer.getData(\"text/plain\");\n            if (this.checkIfVaildDrop(id)) {\n                const restOfData = this.getDropData(id);\n                const shipDom = document.getElementById(restOfData);\n                dockyard.append(shipDom);\n                this.updateBoard();\n            }\n        };\n        dockyard === null || dockyard === void 0 ? void 0 : dockyard.addEventListener(\"drop\", dropShipToDockyard);\n        dockyard === null || dockyard === void 0 ? void 0 : dockyard.addEventListener(\"dragover\", (e) => {\n            e.preventDefault();\n        });\n    }\n    randomSetup() {\n        const randomShips = this.player.gameboard.randomShipSetup();\n        const gameSquares = Array.from(this.gameboard.childNodes);\n        // console.log(randomShips);\n        randomShips.forEach((ship, index) => {\n            if (this.shipsDOM) {\n                const shipDom = this.shipsDOM[index];\n                const { startPosition, endPosition } = ship;\n                const squareToAppendTo = gameSquares[startPosition];\n                shipDom.setAttribute(\"start\", startPosition.toString());\n                shipDom.setAttribute(\"end\", endPosition.toString());\n                if (endPosition - startPosition >= 10) {\n                    shipDom.classList.add(\"ship-vertical\");\n                }\n                else {\n                    shipDom.classList.remove(\"ship-vertical\");\n                }\n                squareToAppendTo.appendChild(shipDom);\n                this.updateBoard();\n            }\n        });\n    }\n    checkIfVaildDrop(id) {\n        const firstLetter = id.slice(0, 1);\n        const restOfData = id.substring(1);\n        if (firstLetter === \"S\" &&\n            Number(restOfData) !== NaN &&\n            restOfData !== \"\") {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getDropData(id) {\n        return id.substring(1);\n    }\n    reset() {\n        const dockyard = document.getElementById(\"dockyard\");\n        if (this.shipsDOM) {\n            this.shipsDOM.forEach((ship) => {\n                dockyard.appendChild(ship);\n                this.player.resetGameboard();\n                this.updateBoard();\n            });\n        }\n    }\n    canStart() {\n        const dockyard = document.getElementById(\"dockyard\");\n        if (dockyard.childElementCount === 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    start() {\n        var _a;\n        const dockyard = document.getElementById(\"dockyard\");\n        const humanBoard = document.getElementById(\"human--board\");\n        const botBoard = document.getElementById(\"copmuterBoardWrap\");\n        const humanWrap = document.getElementById(\"gameboard-human-wrap\");\n        const tips = document.getElementById(\"tips\");\n        const options = document.getElementById(\"options\");\n        const gameDiv = document.getElementById(\"game-div\");\n        if (this.canStart()) {\n            humanBoard === null || humanBoard === void 0 ? void 0 : humanBoard.classList.toggle(\"dev\");\n            botBoard.classList.toggle(\"hide\");\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.appendChild(humanWrap);\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.appendChild(tips);\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.appendChild(botBoard);\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.classList.add(\"game\");\n            dockyard.classList.add(\"hide\");\n            options.classList.add(\"hide\");\n            (_a = this.shipsDOM) === null || _a === void 0 ? void 0 : _a.forEach(item => {\n                item.classList.add(\"hide\");\n                dockyard.appendChild(item);\n            });\n            // console.log(boardsContainer,botBoard)\n            // change class or some shit  \n        }\n        else {\n            console.log(\"cant start\");\n        }\n    }\n}\nexports.default = BoardSetup;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/BoardSetup.js?");

/***/ }),

/***/ "./src/ts/js/BoardState.js":
/*!*********************************!*\
  !*** ./src/ts/js/BoardState.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass BoardState {\n    constructor() {\n        this.positions = this.initalSetup();\n    }\n    initalSetup() {\n        const ret = [];\n        for (let i = 0; i < 100; i++) {\n            ret.push({ isHit: false, ship: undefined, canPlace: true });\n        }\n        return ret;\n    }\n    getSquareState(index) {\n        const result = this.positions[index];\n        if (result.ship !== undefined) {\n            return \"afloat\";\n        }\n        else if (!result.canPlace) {\n            return \"unplaceable\";\n        }\n        else {\n            return \"empty\";\n        }\n    }\n    addShip(ship) {\n        for (const point of ship.hull) {\n            this.positions[point.position].ship = ship;\n            this.positions[point.position].canPlace = false;\n        }\n        for (const index of ship.adjecentPositions) {\n            this.positions[index].canPlace = false;\n        }\n    }\n    removeShip(ships) {\n        this.positions = this.initalSetup();\n        ships.forEach(ship => {\n            this.addShip(ship);\n        });\n    }\n    setHit(position) {\n        if (typeof position === \"number\") {\n            this.addToHitList(position);\n        }\n        else {\n            for (const num of position) {\n                this.addToHitList(num);\n            }\n        }\n    }\n    addToHitList(position) {\n        this.positions[position].isHit = true;\n    }\n    isHit(position) {\n        return this.positions[position].isHit ? true : false;\n    }\n    checkCanBePlaced(ship) {\n        if (ship.endPosition > 99) {\n            return false;\n        }\n        if (ship.startPosition % 10 !== ship.endPosition % 10 &&\n            ship.startPosition - (ship.startPosition % 10) !==\n                ship.endPosition - (ship.endPosition % 10)) {\n            return false;\n        }\n        for (const x of ship.hull) {\n            if (!this.positions[x.position].canPlace) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.default = BoardState;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/BoardState.js?");

/***/ }),

/***/ "./src/ts/js/Buttons.js":
/*!******************************!*\
  !*** ./src/ts/js/Buttons.js ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resetBoard = exports.startGame = exports.audioToggle = exports.randomSetup = void 0;\nconst randomSetup = () => {\n    console.log(1);\n};\nexports.randomSetup = randomSetup;\nconst audioToggle = () => {\n    console.log(1);\n};\nexports.audioToggle = audioToggle;\nconst startGame = () => {\n    console.log(1);\n};\nexports.startGame = startGame;\nconst resetBoard = () => {\n    console.log(1);\n};\nexports.resetBoard = resetBoard;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Buttons.js?");

/***/ }),

/***/ "./src/ts/js/Gameboard.js":
/*!********************************!*\
  !*** ./src/ts/js/Gameboard.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Ship_1 = __importDefault(__webpack_require__(/*! ./Ship */ \"./src/ts/js/Ship.js\"));\nconst BoardState_1 = __importDefault(__webpack_require__(/*! ./BoardState */ \"./src/ts/js/BoardState.js\"));\nclass Gameboard {\n    constructor() {\n        this.ships = [];\n        this.boardState = new BoardState_1.default();\n        this.shipsSizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];\n    }\n    resetGameboard() {\n        this.ships = [];\n        this.boardState = new BoardState_1.default();\n    }\n    areShipsSunk() {\n        for (const ship of this.ships) {\n            if (!ship.isSunk()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    tryToPlaceShip(startPosistion, endPosistion, shouldPlace = true) {\n        const createdShip = new Ship_1.default(startPosistion, endPosistion);\n        if (this.boardState.checkCanBePlaced(createdShip) && endPosistion <= 99) {\n            if (shouldPlace) {\n                this.finishPlacingShip(createdShip);\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    isPositionHit(positon) {\n        return this.boardState.isHit(positon);\n    }\n    getPosition(posistion) {\n        return this.boardState.positions[posistion];\n    }\n    removeShip(start, end) {\n        let indexToRemove = -1;\n        console.log(this.ships.length, \"przed\");\n        this.ships.forEach((ship, inedx) => {\n            if (ship.startPosition == start) {\n                indexToRemove = inedx;\n            }\n        });\n        if (indexToRemove !== -1) {\n            this.ships.splice(indexToRemove, 1);\n        }\n        this.boardState.removeShip(this.ships);\n        console.log(this.ships.length, \"po\");\n    }\n    recieveAttack(posistion) {\n        var _a, _b;\n        if (this.getPosition(posistion).ship === null) {\n            (_a = this.getPosition(posistion).ship) === null || _a === void 0 ? void 0 : _a.receiveHit(posistion);\n            return false;\n        }\n        else {\n            this.getPosition(posistion).isHit = true;\n            (_b = this.getPosition(posistion).ship) === null || _b === void 0 ? void 0 : _b.receiveHit(posistion);\n            return true;\n        }\n    }\n    randomShipSetup() {\n        this.resetGameboard();\n        this.shipsSizes.forEach((length) => {\n            this.createRadnomShip(length);\n        });\n        return this.ships;\n    }\n    createRadnomShip(lenght) {\n        while (true) {\n            if (Math.round(Math.random()) === 1) {\n                if (this.randomVerticalShip(lenght)) {\n                    break;\n                }\n            }\n            else {\n                if (this.randomHorizontalShip(lenght)) {\n                    break;\n                }\n            }\n        }\n    }\n    randomVerticalShip(length) {\n        const randomColumn = Math.floor(Math.random() * 10);\n        const validStarts = this.getValidVerticalStarts(randomColumn, length);\n        if (validStarts.length !== 0) {\n            const randomStart = validStarts[Math.floor(Math.random() * validStarts.length)];\n            const newShip = new Ship_1.default(randomStart, randomStart + (length - 1) * 10);\n            if (true) {\n                this.finishPlacingShip(newShip);\n                return true;\n            }\n        }\n        return false;\n    }\n    getValidVerticalStarts(column, length) {\n        const possibleStarts = [];\n        for (let i = 0; i < 11 - length; i++) {\n            let canInsert = true;\n            for (let j = 0; j < length; j++) {\n                // j == fieds to check\n                // l = ilosc do sprawdzenia za kazdym razem\n                if (!this.boardState.positions[(i + j) * 10 + column].canPlace) {\n                    canInsert = false;\n                    break;\n                }\n            }\n            if (canInsert) {\n                possibleStarts.push(i * 10 + column);\n            }\n        }\n        return possibleStarts;\n    }\n    randomHorizontalShip(length) {\n        const randomRow = Math.floor(Math.random() * 10) * 10;\n        const validStarts = this.getValidHorizontalStarts(randomRow, length);\n        if (validStarts.length !== 0) {\n            // there are possible postions\n            const randomStart = validStarts[Math.floor(Math.random() * validStarts.length)];\n            const newShip = new Ship_1.default(randomStart, randomStart + length - 1);\n            this.finishPlacingShip(newShip);\n            return true;\n        }\n        return false;\n    }\n    getValidHorizontalStarts(row, length) {\n        const possibleStarts = [];\n        for (let i = 0; i < 11 - length; i++) {\n            let canInsert = true;\n            for (let j = 0; j < length; j++) {\n                if (!this.boardState.positions[i + j + row].canPlace) {\n                    canInsert = false;\n                    break;\n                }\n            }\n            if (canInsert) {\n                possibleStarts.push(i + row);\n            }\n        }\n        return possibleStarts;\n    }\n    finishPlacingShip(createdShip) {\n        this.ships.push(createdShip);\n        this.boardState.addShip(createdShip);\n    }\n}\nexports.default = Gameboard;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Gameboard.js?");

/***/ }),

/***/ "./src/ts/js/Player.js":
/*!*****************************!*\
  !*** ./src/ts/js/Player.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Gameboard_1 = __importDefault(__webpack_require__(/*! ./Gameboard */ \"./src/ts/js/Gameboard.js\"));\nclass Player {\n    constructor(isCoomputer) {\n        this.isComputer = isCoomputer;\n        this.gameboard = new Gameboard_1.default();\n        this.enemy = null;\n    }\n    resetGameboard() {\n        this.gameboard.resetGameboard();\n    }\n    tryToPlaceShip(startPosistion, endPosistion, shouldPlace = true) {\n        return this.gameboard.tryToPlaceShip(startPosistion, endPosistion, shouldPlace);\n    }\n    setEnemy(enemy) {\n        this.enemy = enemy;\n    }\n    hasLost() {\n        return this.gameboard.areShipsSunk();\n    }\n    recieveAttack(posistion) {\n        this.gameboard.recieveAttack(posistion);\n    }\n    randomizeShips() {\n        this.gameboard.randomShipSetup();\n    }\n    beginAttack(posistion) {\n        var _a;\n        const hasHit = (_a = this.enemy) === null || _a === void 0 ? void 0 : _a.recieveAttack(posistion);\n        // ai should do something wit that info   \n    }\n    choosePositionToAttack(posistion) {\n        var _a;\n        if ((_a = this.enemy) === null || _a === void 0 ? void 0 : _a.gameboard.isPositionHit(posistion)) {\n            this.beginAttack(posistion);\n        }\n        else {\n            //\n        }\n    }\n    takeAction() {\n        if (this.isComputer) {\n            //\n        }\n        else {\n            //\n        }\n    }\n    humanAction() { }\n    computerAction() { }\n}\nexports.default = Player;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Player.js?");

/***/ }),

/***/ "./src/ts/js/Ship.js":
/*!***************************!*\
  !*** ./src/ts/js/Ship.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ship {\n    constructor(startPosition, endPosition) {\n        this.length = this.setLength(startPosition, endPosition);\n        this.hull = this.setHull(this.length, startPosition, endPosition);\n        this.startPosition = startPosition;\n        this.endPosition = endPosition;\n        this.adjecentPositions = this.setAdjecentPositions(this.hull);\n    }\n    setHull(length, startPosition, endPosition) {\n        //  eP - sP is smaller than 10? then it is horizontal\n        const hull = [];\n        if (endPosition - startPosition < 10) {\n            for (let i = 0; i < length; i++) {\n                hull.push({ isHit: false, position: startPosition + i });\n            }\n        }\n        else {\n            for (let i = 0; i < length; i++) {\n                hull.push({ isHit: false, position: startPosition + i * 10 });\n            }\n        }\n        return hull;\n    }\n    setAdjecentPositions(hull) {\n        let positionsToCheck = [];\n        for (const point of hull) {\n            positionsToCheck = positionsToCheck.concat(this.getAdjecentToPosition(point.position));\n        }\n        return [...new Set(positionsToCheck)];\n    }\n    getAdjecentToPosition(position) {\n        const positions = [position];\n        if (position == 10) {\n            positions.push(0);\n        }\n        if (position % 10 !== 9) {\n            positions.push(position + 1);\n            if (position > 9) {\n                positions.push(position - 9);\n            }\n            if (position < 90) {\n                positions.push(position + 11);\n            }\n        }\n        if (position % 10 !== 0) {\n            positions.push(position - 1);\n            if (position > 9) {\n                positions.push(position - 11);\n            }\n            if (position < 90) {\n                positions.push(position + 9);\n            }\n        }\n        if (position > 10) {\n            positions.push(position - 10);\n        }\n        if (position < 90) {\n            positions.push(position + 10);\n        }\n        return positions;\n    }\n    setLength(startPosition, endPosition) {\n        if (endPosition - startPosition < 10) {\n            //horizotnal\n            return endPosition - startPosition + 1;\n        }\n        else {\n            return (endPosition - startPosition) / 10 + 1;\n        }\n    }\n    receiveHit(hitPosition) {\n        this.getPoint(hitPosition).isHit = true;\n    }\n    getPoint(posistion) {\n        for (const point of this.hull) {\n            if (point.position == posistion) {\n                return point;\n            }\n        }\n        return this.hull[0];\n    }\n    isSunk() {\n        for (const point of this.hull) {\n            if (!point.isHit) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.default = Ship;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Ship.js?");

/***/ }),

/***/ "./src/ts/js/TextControl.js":
/*!**********************************!*\
  !*** ./src/ts/js/TextControl.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AnimatedText_1 = __importDefault(__webpack_require__(/*! ./AnimatedText */ \"./src/ts/js/AnimatedText.js\"));\nclass TextControl {\n    constructor() {\n        const modalBigText = document.getElementById(\"modalBigText\");\n        const bigModal = document.getElementById(\"modalBig\");\n        const modalSmallText = document.getElementById(\"modalSmallText\");\n        const smallModal = document.getElementById(\"modalSmall\");\n        const logo = document.getElementById(\"logo\");\n        const helperText = document.getElementById(\"helpetText\");\n        const tip1 = document.getElementById(\"tip1\");\n        const tip2 = document.getElementById(\"tip2\");\n        this.animatedSmallModal = new AnimatedText_1.default(modalSmallText, smallModal);\n        this.animatedBigModal = new AnimatedText_1.default(modalBigText, bigModal);\n        this.animatedGameText = new AnimatedText_1.default(helperText);\n        this.animatedLogo = new AnimatedText_1.default(logo);\n        this.animatedTip1 = new AnimatedText_1.default(tip1);\n        this.animatedTip2 = new AnimatedText_1.default(tip2);\n        this.modalSpeed = 2500;\n    }\n    changePhase(phase) {\n        let textToDisplay = ``;\n        if (phase === 1) {\n            textToDisplay = `Phase one \\n  Setup `;\n        }\n        else {\n            textToDisplay = `Phase two \\n Battle `;\n        }\n        this.animatedBigModal.typeTemporary(textToDisplay, this.modalSpeed);\n    }\n    typeLogo() {\n        this.animatedLogo.type(\"Battleships retro \");\n        const sibling = document.getElementById(\"logo\").nextElementSibling;\n        setTimeout(() => {\n            sibling === null || sibling === void 0 ? void 0 : sibling.classList.remove(\"hide\");\n        }, this.modalSpeed);\n    }\n}\nexports.default = TextControl;\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/TextControl.js?");

/***/ }),

/***/ "./src/ts/js/index.js":
/*!****************************!*\
  !*** ./src/ts/js/index.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Player_1 = __importDefault(__webpack_require__(/*! ./Player */ \"./src/ts/js/Player.js\"));\nconst BoardSetup_1 = __importDefault(__webpack_require__(/*! ./BoardSetup */ \"./src/ts/js/BoardSetup.js\"));\nconst Buttons_1 = __webpack_require__(/*! ./Buttons */ \"./src/ts/js/Buttons.js\");\nconst TextControl_1 = __importDefault(__webpack_require__(/*! ./TextControl */ \"./src/ts/js/TextControl.js\"));\nconst human = new Player_1.default(false);\nconst computer = new Player_1.default(true);\nconst humanBoard = document.getElementById(\"human--board\");\nconst computerBoard = document.getElementById(\"computer--board\");\nconst computerBoardSetup = new BoardSetup_1.default(computer, computerBoard);\nconst humanBoardSetup = new BoardSetup_1.default(human, humanBoard);\nconst resetButton = document.getElementById(\"reset\");\nconst radomButton = document.getElementById(\"random\");\nconst startButton = document.getElementById(\"start\");\nconst audioButton = document.getElementById(\"audio\");\nconst audioIcon = document.getElementById(\"audioIcon\");\nradomButton === null || radomButton === void 0 ? void 0 : radomButton.addEventListener(\"click\", () => {\n    humanBoardSetup.randomSetup();\n});\nresetButton === null || resetButton === void 0 ? void 0 : resetButton.addEventListener(\"click\", () => {\n    humanBoardSetup.reset();\n});\nstartButton === null || startButton === void 0 ? void 0 : startButton.addEventListener(\"click\", () => {\n    if (humanBoardSetup.canStart()) {\n        textControl.changePhase(2);\n        humanBoardSetup.start();\n    }\n    else {\n        // modal or some shit\n    }\n});\naudioButton === null || audioButton === void 0 ? void 0 : audioButton.addEventListener(\"click\", Buttons_1.audioToggle);\naudioIcon === null || audioIcon === void 0 ? void 0 : audioIcon.addEventListener(\"click\", Buttons_1.audioToggle);\nhuman.setEnemy(computer);\ncomputer.setEnemy(human);\nhumanBoardSetup.addSquares();\ncomputerBoardSetup.addSquares();\ncomputer.randomizeShips();\n// computerBoardSetup.updateBoard();\nhumanBoardSetup.updateBoard();\nconsole.log(human);\nconsole.log(computer);\nconst textControl = new TextControl_1.default;\ntextControl.changePhase(1);\ntextControl.typeLogo();\n// animatedGameText.typeTips()\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/index.js?");

/***/ }),

/***/ "./src/ts/js/temp.js":
/*!***************************!*\
  !*** ./src/ts/js/temp.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction setupTypewriter(textInDom, textToDisplay = \"error\", speed = 10) {\n    textInDom.innerHTML = \"\";\n    var cursorPosition = 0, tag = \"\", writingTag = false, tagOpen = false, typeSpeed = speed, tempTypeSpeed = 0;\n    var type = function () {\n        if (writingTag === true) {\n            tag += textToDisplay[cursorPosition];\n        }\n        if (textToDisplay[cursorPosition] === \"<\") {\n            tempTypeSpeed = 0;\n            if (tagOpen) {\n                tagOpen = false;\n                writingTag = true;\n            }\n            else {\n                tag = \"\";\n                tagOpen = true;\n                writingTag = true;\n                tag += textToDisplay[cursorPosition];\n            }\n        }\n        if (!writingTag && tagOpen) {\n            tag.innerHTML += textToDisplay[cursorPosition];\n        }\n        if (!writingTag && !tagOpen) {\n            if (textToDisplay[cursorPosition] === \" \") {\n                tempTypeSpeed = 0;\n            }\n            else {\n                tempTypeSpeed = Math.random() * typeSpeed + 50;\n            }\n            textInDom.innerHTML += textToDisplay[cursorPosition];\n        }\n        if (writingTag === true && textToDisplay[cursorPosition] === \">\") {\n            tempTypeSpeed = Math.random() * typeSpeed + 50;\n            writingTag = false;\n            if (tagOpen) {\n                var newSpan = document.createElement(\"span\");\n                textInDom.appendChild(newSpan);\n                newSpan.innerHTML = tag;\n                tag = newSpan.firstChild;\n            }\n        }\n        cursorPosition += 1;\n        if (cursorPosition < textToDisplay.length - 1) {\n            setTimeout(type, tempTypeSpeed);\n        }\n    };\n    type();\n    // return {\n    //   type: type,\n    // };\n}\nexports.default = setupTypewriter;\n// var typer = document.getElementById(\"typewriter\");\n// const typewriter = setupTypewriter(typer);\n// typewriter.type();\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/temp.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/js/index.js");
/******/ 	
/******/ })()
;