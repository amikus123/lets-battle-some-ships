/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/js/AnimatedText.js":
/*!***********************************!*\
  !*** ./src/ts/js/AnimatedText.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst animateText_1 = __importDefault(__webpack_require__(/*! ./animateText */ \"./src/ts/js/animateText.js\"));\r\nclass AnimatedText {\r\n    constructor(element, modal = null, speed = 10) {\r\n        this.removePreviousTimeout = () => {\r\n            if (this.lastTimeoutId !== null) {\r\n                clearTimeout(this.lastTimeoutId);\r\n                this.lastTimeoutId = null;\r\n            }\r\n        };\r\n        this.displayTarget = element;\r\n        this.typeSpeed = speed;\r\n        this.modal = modal;\r\n        this.lastTimeoutId = null;\r\n    }\r\n    setSpeed(newSpeed) {\r\n        this.typeSpeed = newSpeed;\r\n    }\r\n    typeTemporary(text, removeAfter = 2500) {\r\n        var _a, _b;\r\n        this.resetText();\r\n        this.removePreviousTimeout();\r\n        (_a = this.displayTarget) === null || _a === void 0 ? void 0 : _a.classList.remove(\"hide\");\r\n        if (this.modal) {\r\n            (_b = this.modal) === null || _b === void 0 ? void 0 : _b.classList.remove(\"hide\");\r\n        }\r\n        animateText_1.default(this.displayTarget, text);\r\n        setTimeout(() => {\r\n            var _a, _b;\r\n            (_a = this.displayTarget) === null || _a === void 0 ? void 0 : _a.classList.add(\"hide\");\r\n            if (this.modal) {\r\n                (_b = this.modal) === null || _b === void 0 ? void 0 : _b.classList.add(\"hide\");\r\n            }\r\n        }, removeAfter);\r\n    }\r\n    type(text) {\r\n        var _a, _b;\r\n        this.resetText();\r\n        this.removePreviousTimeout();\r\n        (_a = this.displayTarget) === null || _a === void 0 ? void 0 : _a.classList.remove(\"hide\");\r\n        if (this.modal) {\r\n            (_b = this.modal) === null || _b === void 0 ? void 0 : _b.classList.remove(\"hide\");\r\n        }\r\n        animateText_1.default(this.displayTarget, text);\r\n    }\r\n    hide() {\r\n        var _a;\r\n        this.displayTarget.classList.add(\"hide\");\r\n        if (this.modal) {\r\n            (_a = this.modal) === null || _a === void 0 ? void 0 : _a.classList.add(\"hide\");\r\n        }\r\n    }\r\n    resetText() {\r\n        var _a, _b;\r\n        const elementToReplace = this.displayTarget;\r\n        const newElement = document.createElement(elementToReplace.tagName.toLowerCase());\r\n        newElement.id = elementToReplace.id;\r\n        const classArray = elementToReplace.classList.value.split(\" \");\r\n        classArray.forEach((item) => {\r\n            newElement.classList.add(item);\r\n        });\r\n        if (elementToReplace.nextElementSibling === null) {\r\n            (_a = elementToReplace.parentElement) === null || _a === void 0 ? void 0 : _a.append(newElement);\r\n        }\r\n        else {\r\n            (_b = elementToReplace.parentElement) === null || _b === void 0 ? void 0 : _b.insertBefore(newElement, elementToReplace.nextElementSibling);\r\n        }\r\n        elementToReplace.remove();\r\n        this.displayTarget = newElement;\r\n    }\r\n}\r\nexports.default = AnimatedText;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/AnimatedText.js?");

/***/ }),

/***/ "./src/ts/js/AudioControl.js":
/*!***********************************!*\
  !*** ./src/ts/js/AudioControl.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass AudioControl {\r\n    constructor() {\r\n        this.musicPlayerc = document.getElementsByTagName(\"audio\")[0];\r\n        this.soundPlayer = document.getElementsByTagName(\"audio\")[1];\r\n        this.theme = \"./media/audio/theme.mp3\";\r\n        this.shot = \"./media/audio/shot.wav\";\r\n        this.happy = \"./media/audio/happy.wav\";\r\n        this.error = \"./media/audio/denied.wav\";\r\n        this.isMuted = true;\r\n        this.musicPlayerc.src = this.theme;\r\n    }\r\n    playMusic(track) {\r\n        this.musicPlayerc.src = track;\r\n        this.musicPlayerc.play();\r\n    }\r\n    playSound(sound) {\r\n        this.soundPlayer.src = sound;\r\n        this.soundPlayer.play();\r\n    }\r\n    playErrorSound() {\r\n        this.playSound(this.error);\r\n    }\r\n    toggleMute() {\r\n        this.isMuted = !this.isMuted;\r\n        this.musicPlayerc.muted = this.isMuted;\r\n        this.soundPlayer.muted = this.isMuted;\r\n        this.soundPlayer.src = \"\";\r\n        if (this.isMuted) {\r\n            this.soundPlayer.pause();\r\n            this.musicPlayerc.pause();\r\n        }\r\n        else {\r\n            this.soundPlayer.play();\r\n            this.musicPlayerc.play();\r\n        }\r\n    }\r\n}\r\nexports.default = AudioControl;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/AudioControl.js?");

/***/ }),

/***/ "./src/ts/js/BoardSetup.js":
/*!*********************************!*\
  !*** ./src/ts/js/BoardSetup.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass BoardSetup {\r\n    constructor(player, gameboard) {\r\n        this.player = player;\r\n        this.gameboard = gameboard;\r\n        this.setupPhase = !player.isComputer;\r\n        if (this.setupPhase) {\r\n            this.shipsDOM = this.setShips();\r\n            this.addDClick();\r\n            this.shipDOMPickUp();\r\n            this.dokcyardSetup();\r\n        }\r\n        else {\r\n            this.shipsDOM = null;\r\n        }\r\n    }\r\n    setShips() {\r\n        return Array.from(document.getElementsByClassName(\"ship\"));\r\n    }\r\n    addSquares() {\r\n        const dropShip = this.ShipDOMDrop();\r\n        const beginDrag = this.getBeginDrag();\r\n        const suffix = this.player.isComputer ? \"com_\" : \"hum_\";\r\n        for (let i = 0; i < 100; i++) {\r\n            const newDiv = document.createElement(\"div\");\r\n            newDiv.className = \"game-square\";\r\n            newDiv.id = suffix + i;\r\n            newDiv.setAttribute(\"index\", i.toString());\r\n            newDiv.addEventListener(\"dragover\", beginDrag);\r\n            newDiv.addEventListener(\"drop\", dropShip);\r\n            this.gameboard.appendChild(newDiv);\r\n        }\r\n    }\r\n    getShipDOMStartAndEnd(square, ship) {\r\n        const length = Number(ship.getAttribute(\"length\"));\r\n        const squareIndex = Number(square.getAttribute(\"index\"));\r\n        if (ship.classList.contains(\"ship-vertical\")) {\r\n            return [squareIndex, squareIndex + 10 * (length - 1)];\r\n        }\r\n        else {\r\n            return [squareIndex, squareIndex + length - 1];\r\n        }\r\n    }\r\n    getBeginDrag() {\r\n        const beginDrag = (e) => {\r\n            e.preventDefault();\r\n        };\r\n        return beginDrag;\r\n    }\r\n    updateBoard() {\r\n        const gameSquares = Array.from(this.gameboard.children);\r\n        for (let i = 0; i < 100; i++) {\r\n            gameSquares[i].className = `game-square ${this.player.gameboard.boardState.getSquareState(i)}`;\r\n        }\r\n    }\r\n    shipDOMPickUp() {\r\n        if (this.shipsDOM !== null) {\r\n            const dragStart = (e) => {\r\n                e.dataTransfer.setData(\"text/plain\", \"S\" + e.target.id);\r\n                // console.log(e.target.parentElement, \"picked up\");\r\n                if (e.target.getAttribute(\"start\") !== null) {\r\n                    // console.log(\"removing a ship\");\r\n                    const start = e.target.getAttribute(\"start\");\r\n                    const end = e.target.getAttribute(\"end\");\r\n                    this.player.gameboard.removeShip(start, end);\r\n                }\r\n            };\r\n            this.shipsDOM.forEach((item) => {\r\n                item.addEventListener(\"dragstart\", dragStart);\r\n            });\r\n        }\r\n    }\r\n    ShipDOMDrop() {\r\n        const dropShip = (e) => {\r\n            e.preventDefault();\r\n            // console.log(e);\r\n            let id = e.dataTransfer.getData(\"text/plain\");\r\n            if (this.checkIfVaildDrop(id)) {\r\n                const restOfData = this.getDropData(id);\r\n                const shipDom = document.getElementById(restOfData);\r\n                const previousParent = shipDom.parentElement;\r\n                const dropTarget = this.getDropSquare(shipDom, e.target);\r\n                // console.log(dropTarget, shipDom,previousParent);\r\n                if (dropTarget.classList.contains(\"game-square\")) {\r\n                    const cords = this.getShipDOMStartAndEnd(dropTarget, shipDom);\r\n                    if (this.player.tryToPlaceShip(cords[0], cords[1])) {\r\n                        // console.log(\"placed in new loaction\");\r\n                        shipDom.setAttribute(\"start\", cords[0].toString());\r\n                        shipDom.setAttribute(\"end\", cords[1].toString());\r\n                        dropTarget.append(shipDom);\r\n                    }\r\n                    else {\r\n                        // console.log(\"fail\");\r\n                        const start = Number(shipDom.getAttribute(\"start\"));\r\n                        const end = Number(shipDom.getAttribute(\"end\"));\r\n                        const length = Number(shipDom.getAttribute(\"length\"));\r\n                        if (start === end && end === 0 && length !== 1) {\r\n                        }\r\n                        else {\r\n                            this.player.tryToPlaceShip(start, end);\r\n                            previousParent === null || previousParent === void 0 ? void 0 : previousParent.append(shipDom);\r\n                            console.log(this);\r\n                        }\r\n                    }\r\n                }\r\n                this.updateBoard();\r\n                // console.log(this.player);\r\n            }\r\n        };\r\n        return dropShip;\r\n    }\r\n    getDropSquare(shipDom, dropTarget) {\r\n        // console.log(shipDom, dropTarget);\r\n        if (dropTarget.classList.contains(\"ship-part\")) {\r\n            const boundingRect = dropTarget.getBoundingClientRect();\r\n            const elementsOnPosition = document.elementsFromPoint(boundingRect.x, boundingRect.y);\r\n            // console.log(elementsOnPosition, \"whats on positon\");\r\n            for (const item of elementsOnPosition) {\r\n                if (item.classList.contains(\"game-square\")) {\r\n                    // console.log(item);\r\n                    return item;\r\n                }\r\n            }\r\n            // return elementsOnPosition[1]\r\n        }\r\n        return dropTarget;\r\n    }\r\n    addDClick() {\r\n        const doubleClick = (e) => {\r\n            const shipDom = e.target.parentElement;\r\n            if (shipDom.parentElement.id === \"dockyard\") {\r\n                shipDom.classList.toggle(\"ship-vertical\");\r\n                console.log(\"DOCK\");\r\n            }\r\n            else {\r\n                const start = Number(shipDom.getAttribute(\"start\"));\r\n                const currentEnd = Number(shipDom.getAttribute(\"end\"));\r\n                const length = Number(shipDom.getAttribute(\"length\"));\r\n                let newEnd = 0;\r\n                if (currentEnd - start < 10) {\r\n                    newEnd = start + (length - 1) * 10;\r\n                }\r\n                else {\r\n                    newEnd = start + length - 1;\r\n                }\r\n                console.log(start, currentEnd, newEnd);\r\n                this.player.gameboard.removeShip(start, currentEnd);\r\n                if (this.player.tryToPlaceShip(start, newEnd)) {\r\n                    shipDom.classList.toggle(\"ship-vertical\");\r\n                    console.log(\"succcc\");\r\n                    shipDom.setAttribute(\"start\", start.toString());\r\n                    shipDom.setAttribute(\"end\", newEnd.toString());\r\n                }\r\n                else {\r\n                    this.player.tryToPlaceShip(start, currentEnd);\r\n                    console.log(\"FAIL\");\r\n                }\r\n                console.log(this.player);\r\n                this.updateBoard();\r\n            }\r\n        };\r\n        if (this.shipsDOM !== null) {\r\n            this.shipsDOM.forEach((item) => item.addEventListener(\"dblclick\", doubleClick));\r\n        }\r\n    }\r\n    dokcyardSetup() {\r\n        const dockyard = document.getElementById(\"dockyard\");\r\n        const dropShipToDockyard = (e) => {\r\n            e.preventDefault();\r\n            // console.log(\"dropping to dock\");\r\n            const id = e.dataTransfer.getData(\"text/plain\");\r\n            if (this.checkIfVaildDrop(id)) {\r\n                const restOfData = this.getDropData(id);\r\n                const shipDom = document.getElementById(restOfData);\r\n                dockyard.append(shipDom);\r\n                this.updateBoard();\r\n            }\r\n        };\r\n        dockyard === null || dockyard === void 0 ? void 0 : dockyard.addEventListener(\"drop\", dropShipToDockyard);\r\n        dockyard === null || dockyard === void 0 ? void 0 : dockyard.addEventListener(\"dragover\", (e) => {\r\n            e.preventDefault();\r\n        });\r\n    }\r\n    randomSetup() {\r\n        const randomShips = this.player.gameboard.randomShipSetup();\r\n        const gameSquares = Array.from(this.gameboard.childNodes);\r\n        // console.log(randomShips);\r\n        randomShips.forEach((ship, index) => {\r\n            if (this.shipsDOM) {\r\n                const shipDom = this.shipsDOM[index];\r\n                const { startPosition, endPosition } = ship;\r\n                const squareToAppendTo = gameSquares[startPosition];\r\n                shipDom.setAttribute(\"start\", startPosition.toString());\r\n                shipDom.setAttribute(\"end\", endPosition.toString());\r\n                if (endPosition - startPosition >= 10) {\r\n                    shipDom.classList.add(\"ship-vertical\");\r\n                }\r\n                else {\r\n                    shipDom.classList.remove(\"ship-vertical\");\r\n                }\r\n                squareToAppendTo.appendChild(shipDom);\r\n                this.updateBoard();\r\n            }\r\n        });\r\n    }\r\n    checkIfVaildDrop(id) {\r\n        const firstLetter = id.slice(0, 1);\r\n        const restOfData = id.substring(1);\r\n        if (firstLetter === \"S\" &&\r\n            Number(restOfData) !== NaN &&\r\n            restOfData !== \"\") {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    getDropData(id) {\r\n        return id.substring(1);\r\n    }\r\n    reset() {\r\n        const dockyard = document.getElementById(\"dockyard\");\r\n        if (this.shipsDOM) {\r\n            this.shipsDOM.forEach((ship) => {\r\n                dockyard.appendChild(ship);\r\n                this.player.resetGameboard();\r\n                this.updateBoard();\r\n            });\r\n        }\r\n    }\r\n    canStart() {\r\n        const dockyard = document.getElementById(\"dockyard\");\r\n        if (dockyard.childElementCount === 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    start() {\r\n        var _a;\r\n        const dockyard = document.getElementById(\"dockyard\");\r\n        const humanBoard = document.getElementById(\"human--board\");\r\n        const botBoard = document.getElementById(\"copmuterBoardWrap\");\r\n        const humanWrap = document.getElementById(\"gameboard-human-wrap\");\r\n        const tips = document.getElementById(\"tips\");\r\n        const tip1 = document.getElementById(\"tip1\");\r\n        const tip2 = document.getElementById(\"tip2\");\r\n        const helperText = document.getElementById(\"helperText\");\r\n        const options = document.getElementById(\"options\");\r\n        const gameDiv = document.getElementById(\"game-div\");\r\n        if (this.canStart()) {\r\n            humanBoard === null || humanBoard === void 0 ? void 0 : humanBoard.classList.toggle(\"setup-board\");\r\n            humanBoard === null || humanBoard === void 0 ? void 0 : humanBoard.classList.toggle(\"game-board\");\r\n            botBoard.classList.toggle(\"hide\");\r\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.appendChild(humanWrap);\r\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.appendChild(tips);\r\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.appendChild(botBoard);\r\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.classList.add(\"game\");\r\n            gameDiv === null || gameDiv === void 0 ? void 0 : gameDiv.classList.remove(\"dev\");\r\n            tip1.classList.toggle(\"hide\");\r\n            tip2.classList.toggle(\"hide\");\r\n            helperText.classList.toggle(\"hide\");\r\n            dockyard.classList.add(\"hide\");\r\n            options.classList.add(\"hide\");\r\n            (_a = this.shipsDOM) === null || _a === void 0 ? void 0 : _a.forEach(item => {\r\n                item.classList.add(\"hide\");\r\n                dockyard.appendChild(item);\r\n            });\r\n            // console.log(boardsContainer,botBoard)\r\n            // change class or some shit  \r\n        }\r\n        else {\r\n            console.log(\"cant start\");\r\n        }\r\n    }\r\n}\r\nexports.default = BoardSetup;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/BoardSetup.js?");

/***/ }),

/***/ "./src/ts/js/BoardState.js":
/*!*********************************!*\
  !*** ./src/ts/js/BoardState.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass BoardState {\r\n    constructor() {\r\n        this.positions = this.initalSetup();\r\n    }\r\n    initalSetup() {\r\n        const ret = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            ret.push({ isHit: false, ship: undefined, canPlace: true });\r\n        }\r\n        return ret;\r\n    }\r\n    getSquareState(position) {\r\n        const square = this.positions[position];\r\n        let result = \"\";\r\n        if (square.ship !== undefined) {\r\n            if (square.isHit) {\r\n                result += \"ship-hit \";\r\n            }\r\n            else {\r\n                result += \"ship-afloat \";\r\n            }\r\n        }\r\n        else {\r\n            if (square.isHit) {\r\n                result += \"empty-hit \";\r\n            }\r\n            else {\r\n                result += \"empty \";\r\n            }\r\n        }\r\n        if (!square.canPlace) {\r\n            result += \" unplaceable\";\r\n        }\r\n        return result;\r\n    }\r\n    getPositionPossibleToAttack() {\r\n        const possibleToAttack = this.positions.filter((item) => {\r\n            return item.isHit === false;\r\n        });\r\n        return possibleToAttack;\r\n    }\r\n    recieveAttack(position) {\r\n        this.positions[position].isHit = true;\r\n    }\r\n    addShip(ship) {\r\n        for (const point of ship.hull) {\r\n            this.positions[point.position].ship = ship;\r\n            this.positions[point.position].canPlace = false;\r\n        }\r\n        for (const index of ship.adjecentPositions) {\r\n            this.positions[index].canPlace = false;\r\n        }\r\n    }\r\n    removeShip(ships) {\r\n        this.positions = this.initalSetup();\r\n        ships.forEach((ship) => {\r\n            this.addShip(ship);\r\n        });\r\n    }\r\n    isHit(position) {\r\n        // return this.positions[position].isHit ? true : false;\r\n        return this.positions[position].isHit;\r\n    }\r\n    checkCanBePlaced(ship) {\r\n        if (ship.endPosition > 99) {\r\n            return false;\r\n        }\r\n        if (ship.startPosition % 10 !== ship.endPosition % 10 &&\r\n            ship.startPosition - (ship.startPosition % 10) !==\r\n                ship.endPosition - (ship.endPosition % 10)) {\r\n            return false;\r\n        }\r\n        for (const x of ship.hull) {\r\n            if (!this.positions[x.position].canPlace) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.default = BoardState;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/BoardState.js?");

/***/ }),

/***/ "./src/ts/js/GameFlow.js":
/*!*******************************!*\
  !*** ./src/ts/js/GameFlow.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass GameFlow {\r\n    constructor(human, humanBoardSetup, computer, textControl) {\r\n        this.human = human;\r\n        this.computer = computer;\r\n        this.textControl = textControl;\r\n        this.humanBoardSetup = humanBoardSetup;\r\n        this.humanTurn = true;\r\n    }\r\n    beginBattle() {\r\n        this.textControl.changePhase(2);\r\n        this.humanBoardSetup.start();\r\n        this.human.addOnClick();\r\n        this.textControl.typeBattleMessage(\"Attack enemy board!\");\r\n    }\r\n    toggleTurn() {\r\n        this.humanTurn = !this.humanTurn;\r\n    }\r\n    beginSetup() { }\r\n    inittializeBoard() {\r\n        this.human.setEnemy(this.computer);\r\n        this.computer.setEnemy(this.human);\r\n        this.textControl.typeLogo();\r\n        this.textControl.changePhase(1);\r\n        this.textControl.typeTips();\r\n    }\r\n    displayBattleMessage(msg) {\r\n        this.textControl.typeBattleMessage(msg);\r\n    }\r\n}\r\nexports.default = GameFlow;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/GameFlow.js?");

/***/ }),

/***/ "./src/ts/js/Gameboard.js":
/*!********************************!*\
  !*** ./src/ts/js/Gameboard.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Ship_1 = __importDefault(__webpack_require__(/*! ./Ship */ \"./src/ts/js/Ship.js\"));\r\nconst BoardState_1 = __importDefault(__webpack_require__(/*! ./BoardState */ \"./src/ts/js/BoardState.js\"));\r\nclass Gameboard {\r\n    constructor() {\r\n        this.ships = [];\r\n        this.boardState = new BoardState_1.default();\r\n        this.shipsSizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];\r\n    }\r\n    resetGameboard() {\r\n        this.ships = [];\r\n        this.boardState = new BoardState_1.default();\r\n    }\r\n    areShipsSunk() {\r\n        for (const ship of this.ships) {\r\n            if (!ship.isSunk()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    tryToPlaceShip(startPosistion, endPosistion, shouldPlace = true) {\r\n        const createdShip = new Ship_1.default(startPosistion, endPosistion);\r\n        if (this.boardState.checkCanBePlaced(createdShip) && endPosistion <= 99) {\r\n            if (shouldPlace) {\r\n                this.finishPlacingShip(createdShip);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    isPositionHit(positon) {\r\n        return this.boardState.isHit(positon);\r\n    }\r\n    getPosition(posistion) {\r\n        return this.boardState.positions[posistion];\r\n    }\r\n    removeShip(start, end) {\r\n        let indexToRemove = -1;\r\n        console.log(this.ships.length, \"przed\");\r\n        this.ships.forEach((ship, inedx) => {\r\n            if (ship.startPosition == start) {\r\n                indexToRemove = inedx;\r\n            }\r\n        });\r\n        if (indexToRemove !== -1) {\r\n            this.ships.splice(indexToRemove, 1);\r\n        }\r\n        this.boardState.removeShip(this.ships);\r\n        console.log(this.ships.length, \"po\");\r\n    }\r\n    recieveAttack(posistion) {\r\n        this.boardState.recieveAttack(posistion);\r\n        this.ships.forEach(ship => {\r\n            ship.hull.forEach(point => {\r\n                if (point.position == posistion) {\r\n                    point.isHit = true;\r\n                }\r\n            });\r\n            if (ship.isSunk()) {\r\n                console.log(\"sunk\");\r\n                ship.adjecentPositions.forEach(index => {\r\n                    this.boardState.recieveAttack(index);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    getPositionPossibleToAttack() {\r\n        return this.boardState.getPositionPossibleToAttack();\r\n    }\r\n    randomShipSetup() {\r\n        this.resetGameboard();\r\n        this.shipsSizes.forEach((length) => {\r\n            this.createRadnomShip(length);\r\n        });\r\n        return this.ships;\r\n    }\r\n    createRadnomShip(lenght) {\r\n        while (true) {\r\n            if (Math.round(Math.random()) === 1) {\r\n                if (this.randomVerticalShip(lenght)) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (this.randomHorizontalShip(lenght)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    randomVerticalShip(length) {\r\n        const randomColumn = Math.floor(Math.random() * 10);\r\n        const validStarts = this.getValidVerticalStarts(randomColumn, length);\r\n        if (validStarts.length !== 0) {\r\n            const randomStart = validStarts[Math.floor(Math.random() * validStarts.length)];\r\n            const newShip = new Ship_1.default(randomStart, randomStart + (length - 1) * 10);\r\n            if (true) {\r\n                this.finishPlacingShip(newShip);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getValidVerticalStarts(column, length) {\r\n        const possibleStarts = [];\r\n        for (let i = 0; i < 11 - length; i++) {\r\n            let canInsert = true;\r\n            for (let j = 0; j < length; j++) {\r\n                // j == fieds to check\r\n                // l = ilosc do sprawdzenia za kazdym razem\r\n                if (!this.boardState.positions[(i + j) * 10 + column].canPlace) {\r\n                    canInsert = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (canInsert) {\r\n                possibleStarts.push(i * 10 + column);\r\n            }\r\n        }\r\n        return possibleStarts;\r\n    }\r\n    randomHorizontalShip(length) {\r\n        const randomRow = Math.floor(Math.random() * 10) * 10;\r\n        const validStarts = this.getValidHorizontalStarts(randomRow, length);\r\n        if (validStarts.length !== 0) {\r\n            // there are possible postions\r\n            const randomStart = validStarts[Math.floor(Math.random() * validStarts.length)];\r\n            const newShip = new Ship_1.default(randomStart, randomStart + length - 1);\r\n            this.finishPlacingShip(newShip);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getValidHorizontalStarts(row, length) {\r\n        const possibleStarts = [];\r\n        for (let i = 0; i < 11 - length; i++) {\r\n            let canInsert = true;\r\n            for (let j = 0; j < length; j++) {\r\n                if (!this.boardState.positions[i + j + row].canPlace) {\r\n                    canInsert = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (canInsert) {\r\n                possibleStarts.push(i + row);\r\n            }\r\n        }\r\n        return possibleStarts;\r\n    }\r\n    finishPlacingShip(createdShip) {\r\n        this.ships.push(createdShip);\r\n        this.boardState.addShip(createdShip);\r\n    }\r\n}\r\nexports.default = Gameboard;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Gameboard.js?");

/***/ }),

/***/ "./src/ts/js/Player.js":
/*!*****************************!*\
  !*** ./src/ts/js/Player.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Gameboard_1 = __importDefault(__webpack_require__(/*! ./Gameboard */ \"./src/ts/js/Gameboard.js\"));\r\nclass Player {\r\n    constructor(isCoomputer) {\r\n        this.isComputer = isCoomputer;\r\n        this.gameboard = new Gameboard_1.default();\r\n        this.enemy = null;\r\n        this.gameFlow = null;\r\n        this.audioControl = null;\r\n    }\r\n    setGameFlow(gameFlow) {\r\n        this.gameFlow = gameFlow;\r\n    }\r\n    setEnemy(enemy) {\r\n        this.enemy = enemy;\r\n    }\r\n    setAudioControl(audio) {\r\n        this.audioControl = audio;\r\n    }\r\n    resetGameboard() {\r\n        this.gameboard.resetGameboard();\r\n    }\r\n    tryToPlaceShip(startPosistion, endPosistion, shouldPlace = true) {\r\n        return this.gameboard.tryToPlaceShip(startPosistion, endPosistion, shouldPlace);\r\n    }\r\n    randomizeShips() {\r\n        this.gameboard.randomShipSetup();\r\n    }\r\n    hasLost() {\r\n        return this.gameboard.areShipsSunk();\r\n    }\r\n    recieveAttack(posistion) {\r\n        this.gameboard.recieveAttack(posistion);\r\n        this.updateBoard();\r\n    }\r\n    addOnClick() {\r\n        var _a;\r\n        const enemyBoardDOM = document.getElementById(\"computer--board\");\r\n        Array.from(enemyBoardDOM === null || enemyBoardDOM === void 0 ? void 0 : enemyBoardDOM.children).forEach((square, index) => {\r\n            square.addEventListener(\"click\", () => this.userClick(square, index));\r\n        });\r\n        (_a = this.enemy) === null || _a === void 0 ? void 0 : _a.updateBoard();\r\n    }\r\n    beginAttack(posistion) {\r\n        var _a, _b;\r\n        const attackedPosition = this.getPosition(posistion);\r\n        console.log(attackedPosition, \"attacked\");\r\n        (_a = this.enemy) === null || _a === void 0 ? void 0 : _a.recieveAttack(posistion);\r\n        const message = this.getMessageToDisply(attackedPosition);\r\n        this.gameFlow.displayBattleMessage(message);\r\n        // console.log(this.getPositionPossibleToAttack());\r\n        (_b = this.enemy) === null || _b === void 0 ? void 0 : _b.updateBoard();\r\n    }\r\n    getMessageToDisply(posistion) {\r\n        const name = this.isComputer ? \"Enemy has \" : \"You have \";\r\n        let action = \"\";\r\n        if (posistion.ship === undefined) {\r\n            action = \"missed! \";\r\n        }\r\n        else if (posistion.ship.isSunk()) {\r\n            action = \"sunk a ship! \";\r\n        }\r\n        else {\r\n            action = \"hit a ship! \";\r\n        }\r\n        return name + action;\r\n    }\r\n    userClick(square, index) {\r\n        var _a, _b;\r\n        if (!square.classList.contains(\"ship-hit\") &&\r\n            !square.classList.contains(\"empty-hit\") &&\r\n            ((_a = this.gameFlow) === null || _a === void 0 ? void 0 : _a.humanTurn)) {\r\n            this.beginAttack(index);\r\n            this.gameFlow.toggleTurn();\r\n            setTimeout(() => {\r\n                this.enemy.computerMove();\r\n            }, 2000);\r\n        }\r\n        else {\r\n            (_b = this.audioControl) === null || _b === void 0 ? void 0 : _b.playErrorSound();\r\n        }\r\n    }\r\n    computerMove() {\r\n        const options = this.getPositionPossibleToAttack();\r\n        const randomPositon = Math.floor(Math.random() * ((options === null || options === void 0 ? void 0 : options.length) + 1));\r\n        console.log(randomPositon);\r\n        this.beginAttack(randomPositon);\r\n        this.gameFlow.toggleTurn();\r\n    }\r\n    updateBoard() {\r\n        let id = \"\";\r\n        if (this.isComputer) {\r\n            id = \"computer--board\";\r\n        }\r\n        else {\r\n            id = \"human--board\";\r\n        }\r\n        const gameboardDOM = document.getElementById(id);\r\n        const gameSquares = Array.from(gameboardDOM.children);\r\n        for (let i = 0; i < 100; i++) {\r\n            gameSquares[i].className = `game-square ${this.gameboard.boardState.getSquareState(i)}`;\r\n        }\r\n    }\r\n    getPositionPossibleToAttack() {\r\n        var _a;\r\n        // console.log(this.enemy?.gameboard.getPositionPossibleToAttack()), \"pssiube\";\r\n        return (_a = this.enemy) === null || _a === void 0 ? void 0 : _a.gameboard.getPositionPossibleToAttack();\r\n    }\r\n    getPosition(positon) {\r\n        var _a, _b;\r\n        console.log((_a = this.enemy) === null || _a === void 0 ? void 0 : _a.gameboard.getPosition(positon), \"adsasd\");\r\n        return (_b = this.enemy) === null || _b === void 0 ? void 0 : _b.gameboard.getPosition(positon);\r\n    }\r\n}\r\nexports.default = Player;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Player.js?");

/***/ }),

/***/ "./src/ts/js/Ship.js":
/*!***************************!*\
  !*** ./src/ts/js/Ship.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass Ship {\r\n    constructor(startPosition, endPosition) {\r\n        this.length = this.setLength(startPosition, endPosition);\r\n        this.hull = this.setHull(this.length, startPosition, endPosition);\r\n        this.startPosition = startPosition;\r\n        this.endPosition = endPosition;\r\n        this.adjecentPositions = this.setAdjecentPositions(this.hull);\r\n    }\r\n    setHull(length, startPosition, endPosition) {\r\n        //  eP - sP is smaller than 10? then it is horizontal\r\n        const hull = [];\r\n        if (endPosition - startPosition < 10) {\r\n            for (let i = 0; i < length; i++) {\r\n                hull.push({ isHit: false, position: startPosition + i });\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < length; i++) {\r\n                hull.push({ isHit: false, position: startPosition + i * 10 });\r\n            }\r\n        }\r\n        return hull;\r\n    }\r\n    setAdjecentPositions(hull) {\r\n        let positionsToCheck = [];\r\n        for (const point of hull) {\r\n            positionsToCheck = positionsToCheck.concat(this.getAdjecentToPosition(point.position));\r\n        }\r\n        return [...new Set(positionsToCheck)];\r\n    }\r\n    getAdjecentToPosition(position) {\r\n        const positions = [position];\r\n        if (position == 10) {\r\n            positions.push(0);\r\n        }\r\n        if (position % 10 !== 9) {\r\n            positions.push(position + 1);\r\n            if (position > 9) {\r\n                positions.push(position - 9);\r\n            }\r\n            if (position < 90) {\r\n                positions.push(position + 11);\r\n            }\r\n        }\r\n        if (position % 10 !== 0) {\r\n            positions.push(position - 1);\r\n            if (position > 9) {\r\n                positions.push(position - 11);\r\n            }\r\n            if (position < 90) {\r\n                positions.push(position + 9);\r\n            }\r\n        }\r\n        if (position > 10) {\r\n            positions.push(position - 10);\r\n        }\r\n        if (position < 90) {\r\n            positions.push(position + 10);\r\n        }\r\n        return positions;\r\n    }\r\n    setLength(startPosition, endPosition) {\r\n        if (endPosition - startPosition < 10) {\r\n            //horizotnal\r\n            return endPosition - startPosition + 1;\r\n        }\r\n        else {\r\n            return (endPosition - startPosition) / 10 + 1;\r\n        }\r\n    }\r\n    receiveHit(hitPosition) {\r\n        this.getPoint(hitPosition).isHit = true;\r\n    }\r\n    getPoint(posistion) {\r\n        for (const point of this.hull) {\r\n            if (point.position == posistion) {\r\n                return point;\r\n            }\r\n        }\r\n        return this.hull[0];\r\n    }\r\n    isSunk() {\r\n        for (const point of this.hull) {\r\n            if (!point.isHit) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.default = Ship;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/Ship.js?");

/***/ }),

/***/ "./src/ts/js/TextControl.js":
/*!**********************************!*\
  !*** ./src/ts/js/TextControl.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst AnimatedText_1 = __importDefault(__webpack_require__(/*! ./AnimatedText */ \"./src/ts/js/AnimatedText.js\"));\r\nclass TextControl {\r\n    constructor() {\r\n        const modalBigText = document.getElementById(\"modalBigText\");\r\n        const bigModal = document.getElementById(\"modalBig\");\r\n        const modalSmallText = document.getElementById(\"modalSmallText\");\r\n        const smallModal = document.getElementById(\"modalSmall\");\r\n        const logo = document.getElementById(\"logo\");\r\n        const helperText = document.getElementById(\"helperText\");\r\n        const tip1 = document.getElementById(\"tip1\");\r\n        const tip2 = document.getElementById(\"tip2\");\r\n        this.animatedSmallModal = new AnimatedText_1.default(modalSmallText, smallModal);\r\n        this.animatedBigModal = new AnimatedText_1.default(modalBigText, bigModal);\r\n        this.animatedGameText = new AnimatedText_1.default(helperText);\r\n        this.animatedLogo = new AnimatedText_1.default(logo);\r\n        this.animatedTip1 = new AnimatedText_1.default(tip1);\r\n        this.animatedTip2 = new AnimatedText_1.default(tip2);\r\n        this.modalSpeed = 2500;\r\n    }\r\n    changePhase(phase) {\r\n        let textToDisplay = ``;\r\n        if (phase === 1) {\r\n            textToDisplay = `Phase one \\n  Setup `;\r\n        }\r\n        else {\r\n            textToDisplay = `Phase two \\n Battle `;\r\n        }\r\n        this.animatedBigModal.typeTemporary(textToDisplay, this.modalSpeed);\r\n    }\r\n    typeLogo() {\r\n        this.animatedLogo.type(\"Battleships retro \");\r\n        const sibling = document.getElementById(\"logo\").nextElementSibling;\r\n        setTimeout(() => {\r\n            sibling === null || sibling === void 0 ? void 0 : sibling.classList.remove(\"hide\");\r\n        }, this.modalSpeed);\r\n    }\r\n    typeTips() {\r\n        setTimeout(() => {\r\n            this.animatedTip1.type(\"Drag ships to place them \");\r\n            this.animatedTip2.type(\"Dobule click on ship to rotate \");\r\n        }, this.modalSpeed);\r\n    }\r\n    typeBattleMessage(msg) {\r\n        this.animatedGameText.type(msg);\r\n    }\r\n}\r\nexports.default = TextControl;\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/TextControl.js?");

/***/ }),

/***/ "./src/ts/js/animateText.js":
/*!**********************************!*\
  !*** ./src/ts/js/animateText.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nfunction setupTypewriter(textInDom, textToDisplay = \"error\", speed = 10) {\r\n    textInDom.innerHTML = \"\";\r\n    var cursorPosition = 0, tag = \"\", writingTag = false, tagOpen = false, typeSpeed = speed, tempTypeSpeed = 0;\r\n    var type = function () {\r\n        if (writingTag === true) {\r\n            tag += textToDisplay[cursorPosition];\r\n        }\r\n        if (textToDisplay[cursorPosition] === \"<\") {\r\n            tempTypeSpeed = 0;\r\n            if (tagOpen) {\r\n                tagOpen = false;\r\n                writingTag = true;\r\n            }\r\n            else {\r\n                tag = \"\";\r\n                tagOpen = true;\r\n                writingTag = true;\r\n                tag += textToDisplay[cursorPosition];\r\n            }\r\n        }\r\n        if (!writingTag && tagOpen) {\r\n            tag.innerHTML += textToDisplay[cursorPosition];\r\n        }\r\n        if (!writingTag && !tagOpen) {\r\n            if (textToDisplay[cursorPosition] === \" \") {\r\n                tempTypeSpeed = 0;\r\n            }\r\n            else {\r\n                tempTypeSpeed = Math.random() * typeSpeed + 50;\r\n            }\r\n            textInDom.innerHTML += textToDisplay[cursorPosition];\r\n        }\r\n        if (writingTag === true && textToDisplay[cursorPosition] === \">\") {\r\n            tempTypeSpeed = Math.random() * typeSpeed + 50;\r\n            writingTag = false;\r\n            if (tagOpen) {\r\n                var newSpan = document.createElement(\"span\");\r\n                textInDom.appendChild(newSpan);\r\n                newSpan.innerHTML = tag;\r\n                tag = newSpan.firstChild;\r\n            }\r\n        }\r\n        cursorPosition += 1;\r\n        if (cursorPosition < textToDisplay.length - 1) {\r\n            setTimeout(type, tempTypeSpeed);\r\n        }\r\n    };\r\n    type();\r\n    // return {\r\n    //   type: type,\r\n    // };\r\n}\r\nexports.default = setupTypewriter;\r\n// var typer = document.getElementById(\"typewriter\");\r\n// const typewriter = setupTypewriter(typer);\r\n// typewriter.type();\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/animateText.js?");

/***/ }),

/***/ "./src/ts/js/index.js":
/*!****************************!*\
  !*** ./src/ts/js/index.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Player_1 = __importDefault(__webpack_require__(/*! ./Player */ \"./src/ts/js/Player.js\"));\r\nconst GameFlow_1 = __importDefault(__webpack_require__(/*! ./GameFlow */ \"./src/ts/js/GameFlow.js\"));\r\nconst BoardSetup_1 = __importDefault(__webpack_require__(/*! ./BoardSetup */ \"./src/ts/js/BoardSetup.js\"));\r\nconst TextControl_1 = __importDefault(__webpack_require__(/*! ./TextControl */ \"./src/ts/js/TextControl.js\"));\r\nconst AudioControl_1 = __importDefault(__webpack_require__(/*! ./AudioControl */ \"./src/ts/js/AudioControl.js\"));\r\nconst human = new Player_1.default(false);\r\nconst computer = new Player_1.default(true);\r\nconst humanBoard = document.getElementById(\"human--board\");\r\nconst computerBoard = document.getElementById(\"computer--board\");\r\nconst computerBoardSetup = new BoardSetup_1.default(computer, computerBoard);\r\nconst humanBoardSetup = new BoardSetup_1.default(human, humanBoard);\r\nconst textControl = new TextControl_1.default();\r\nconst audioControl = new AudioControl_1.default();\r\nconst gameFlow = new GameFlow_1.default(human, humanBoardSetup, computer, textControl);\r\nhuman.setAudioControl(audioControl);\r\nhuman.setGameFlow(gameFlow);\r\ncomputer.setGameFlow(gameFlow);\r\nconst resetButton = document.getElementById(\"reset\");\r\nconst radomButton = document.getElementById(\"random\");\r\nconst startButton = document.getElementById(\"start\");\r\nconst audioButton = document.getElementById(\"audio\");\r\nconst audioIcon = document.getElementById(\"audioIcon\");\r\nradomButton === null || radomButton === void 0 ? void 0 : radomButton.addEventListener(\"click\", () => {\r\n    humanBoardSetup.randomSetup();\r\n});\r\nresetButton === null || resetButton === void 0 ? void 0 : resetButton.addEventListener(\"click\", () => {\r\n    humanBoardSetup.reset();\r\n});\r\nstartButton === null || startButton === void 0 ? void 0 : startButton.addEventListener(\"click\", () => {\r\n    if (humanBoardSetup.canStart()) {\r\n        gameFlow.beginBattle();\r\n    }\r\n    else {\r\n        audioControl.playErrorSound();\r\n    }\r\n});\r\nconst audioToggle = () => {\r\n    audioControl.toggleMute();\r\n    let text = \"\";\r\n    if (audioControl.isMuted) {\r\n        text = \"audio off\";\r\n    }\r\n    else {\r\n        text = \"audio on\";\r\n    }\r\n    audioButton.innerHTML = text;\r\n    audioIcon.innerText = text;\r\n    audioButton.classList.toggle(\"muted\");\r\n    audioIcon.classList.toggle(\"muted\");\r\n};\r\naudioButton === null || audioButton === void 0 ? void 0 : audioButton.addEventListener(\"click\", audioToggle);\r\naudioIcon === null || audioIcon === void 0 ? void 0 : audioIcon.addEventListener(\"click\", audioToggle);\r\ngameFlow.inittializeBoard();\r\ngameFlow.beginSetup();\r\nhumanBoardSetup.addSquares();\r\ncomputerBoardSetup.addSquares();\r\ncomputer.randomizeShips();\r\nhumanBoardSetup.updateBoard();\r\nconsole.log(human);\r\nconsole.log(computer);\r\n// animatedGameText.typeTips()\r\n\n\n//# sourceURL=webpack://battleships/./src/ts/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/js/index.js");
/******/ 	
/******/ })()
;